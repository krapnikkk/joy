var functionArr = ['padding', '199185QuttXH', 'iterate', 'floor', 'prototype', 'utf8StrToBytes', 'ffj', 'intArrayToByteArray', '593374kRBQQV', 'charCodeAt', 'cycleLeft', 'longToByte', 'encode', '12fwElZO', 'dataBuf', 'ivByte', 'update', 'BLOCK_BYTE_LEN', 'toCharCodeArray', '65147nNfFIK', 'length', '744599cVhpRh', '1EiSzxy', '1jqjAnx', 'ggj', 'ceil', 'expand', 'doFinal', 'join', '40042ROkuIV', 'intToByte', 'vbuf', 'random', '3318840JyJLCj', 'byteToInt', '452844zJegOP', 'arrayCopy', 'byteArrayToIntArray', 'now', 'dataBufLen', 'totalLen'];
var getFunction = function(pos) {
    return functionArr[pos - 136];
};
(function(arr, _0x3bb8ec) {
    var _0x896a1d = getFunction;
    while (!![]) {
        try {
            var _0x412956 = parseInt(_0x896a1d(136)) * -parseInt(_0x896a1d(142)) + -parseInt(_0x896a1d(0xa5)) + -parseInt(_0x896a1d(0x92)) * parseInt(_0x896a1d(0x90)) + -parseInt(_0x896a1d(0x9e)) + -parseInt(_0x896a1d(0x98)) + -parseInt(_0x896a1d(0xac)) * parseInt(_0x896a1d(0x91)) + parseInt(_0x896a1d(0x9c));
            if (_0x412956 === _0x3bb8ec)
                break;
            else
                arr.push(arr.shift());
        } catch (_0x599f97) {
            arr.push(arr.shift());
        }
    }
}(functionArr, 0x7bc98));
function AAR() {
    this.ivByte = new Array(115,128,22,111,73,20,178,185,23,36,66,215,218,138,6,0,169,111,48,188,22,49,56,170,227,141,238,77,176,251,14,78),
    this.iv = Decoder.byteArrayToIntArray(this.ivByte),
    this.tj = new Array(64),
    this.BLOCK_BYTE_LEN = 64,
    this.vbuf = new Array(8),
    this.dataBuf = new Array(64),
    this.dataBufLen = 0,
    this.totalLen = 0;
    for (var i = 0; i < 64; i++) {
        i <= 15 ? this.tj[i] = 2043430169 : this.tj[i] = 2055708042;
    }
    Decoder.arrayCopy(this.iv, 0, this.vbuf, 0, this.vbuf.length);
}
AAR["prototype"] = {
    'ffj': function(_0x19947d, _0x1726ef, _0x5c911f, _0x2d9e8a) {
        var _0x42a126;
        return _0x2d9e8a <= 15 ? _0x42a126 = _0x19947d ^ _0x1726ef ^ _0x5c911f : _0x42a126 = _0x19947d & _0x1726ef | _0x19947d & _0x5c911f | _0x1726ef & _0x5c911f,
        _0x42a126;
    },
    'ggj': function(_0xe25e0e, _0x5ea652, _0x5ca54f, _0x42f8c7) {
        var _0x524292 = 0;
        return _0x42f8c7 <= 15 ? _0x524292 = _0xe25e0e ^ _0x5ea652 ^ _0x5ca54f : _0x524292 = _0xe25e0e & _0x5ea652 | ~_0xe25e0e & _0x5ca54f,
        _0x524292;
    },
    'p0': function(_0x15e5aa) {
        return _0x15e5aa ^ (_0x15e5aa << 9 | _0x15e5aa >>> 32 - 9) ^ (_0x15e5aa << 0x11 | _0x15e5aa >>> 32 - 0x11);
    },
    'p1': function(_0x49417f) {
        return _0x49417f ^ (_0x49417f << 15 | _0x49417f >>> 32 - 15) ^ (_0x49417f << 0x17 | _0x49417f >>> 32 - 0x17);
    },
    'cycleLeft': function(_0x4a7de6, _0x49b7aa) {
        return _0x4a7de6 << _0x49b7aa | _0x4a7de6 >>> 32 - _0x49b7aa;
    },
    'padding': function(_0x350854) {
        var _0x21f769 = 0, _0x268667 = _0x350854.length, _0x1e6231;
        return _0x21f769 = 64 - (_0x268667 + 1 + 8) % 64,
        _0x21f769 >= 64 && (_0x21f769 = 0),
        _0x1e6231 = new Array(_0x21f769 + 1 + _0x268667 + 8),
        _0x1e6231[_0x268667] = 1 << 7,
        Decoder.arrayCopy(_0x350854, 0, _0x1e6231, 0, _0x268667),
        Decoder.arrayCopy(Decoder.longToByte(this.totalLen << 3), 0, _0x1e6231, _0x268667 + _0x21f769 + 1, 8),
        _0x1e6231;
    },
    'iterate': function(arr) {
        var len = arr.length, _0x22a315 = parseInt(len / 16), _0x18259b, _0x122239, _0x392dce;
        _0x18259b = this.vbuf,
        _0x122239 = new Array(16);
        for (var i = 0; i < _0x22a315; i++) {
            Decoder.arrayCopy(arr, i * 16, _0x122239, 0, _0x122239.length),
            _0x392dce = this.expand(_0x122239),
            _0x18259b = this.cf(_0x18259b, _0x392dce[0], _0x392dce[1]);
        }
        Decoder.arrayCopy(_0x18259b, 0, this.vbuf, 0, _0x18259b.length);
    },
    'expand': function(_0x4fb93d) {
        var _0x3967ae = new Array(0x44)
          , _0x41ecb8 = new Array(64);
        Decoder.arrayCopy(_0x4fb93d, 0, _0x3967ae, 0, _0x4fb93d.length);
        for (var i = 16; i < _0x3967ae.length; i++) {
            _0x3967ae[i] = this.p1(_0x3967ae[i - 16] ^ _0x3967ae[i - 9] ^ this.cycleLeft(_0x3967ae[i - 3], 15)) ^ this.cycleLeft(_0x3967ae[i - 0xd], 7) ^ _0x3967ae[i - 6];
        }
        for (var i = 0; i < _0x41ecb8.length; i++) {
            _0x41ecb8[i] = _0x3967ae[i] ^ _0x3967ae[i + 4];
        }
        return new Array(_0x3967ae,_0x41ecb8);
    },
    'cf': function(data, _0x389661, _0x2155c2) {
        var _0x47776e, _0x54cc28, _0x40ee23, _0x2c3878, _0x28f1e3, _0x129754, _0xfe52ef, _0x370ab3, _0x286eeb, _0x1221de, _0x68c96c, _0x3d6bf4, _0x515f8a;
        _0x54cc28 = data[0],
        _0x40ee23 = data[1],
        _0x2c3878 = data[2],
        _0x28f1e3 = data[3],
        _0x129754 = data[4],
        _0xfe52ef = data[5],
        _0x370ab3 = data[6],
        _0x286eeb = data[7];
        for (var i = 0; i < 64; i++) {
            _0x1221de = this.cycleLeft(this.cycleLeft(_0x54cc28, 0xc) + _0x129754 + this.cycleLeft(this.tj[i], i), 7),
            _0x68c96c = _0x1221de ^ this.cycleLeft(_0x54cc28, 0xc),
            _0x3d6bf4 = this.ffj(_0x54cc28, _0x40ee23, _0x2c3878, i) + _0x28f1e3 + _0x68c96c + _0x2155c2[i],
            _0x515f8a = this.ggj(_0x129754, _0xfe52ef, _0x370ab3, i) + _0x286eeb + _0x1221de + _0x389661[i],
            _0x28f1e3 = _0x2c3878,
            _0x2c3878 = this.cycleLeft(_0x40ee23, 9),
            _0x40ee23 = _0x54cc28,
            _0x54cc28 = _0x3d6bf4,
            _0x286eeb = _0x370ab3,
            _0x370ab3 = this.cycleLeft(_0xfe52ef, 0x13),
            _0xfe52ef = _0x129754,
            _0x129754 = this.p0(_0x515f8a);
        }
        return _0x47776e = new Array(8),
        _0x47776e[0] = _0x54cc28 ^ data[0],
        _0x47776e[1] = _0x40ee23 ^ data[1],
        _0x47776e[2] = _0x2c3878 ^ data[2],
        _0x47776e[3] = _0x28f1e3 ^ data[3],
        _0x47776e[4] = _0x129754 ^ data[4],
        _0x47776e[5] = _0xfe52ef ^ data[5],
        _0x47776e[6] = _0x370ab3 ^ data[6],
        _0x47776e[7] = _0x286eeb ^ data[7],
        _0x47776e;
    },
    'digest': function(_0x468e24) {
        var _0x216056, _0x4cf359 = this.padding(_0x468e24), _0x29dbde = Decoder.byteArrayToIntArray(_0x4cf359);
        this.iterate(_0x29dbde);
        var _0x5613ae = this.vbuf;
        return _0x216056 = Decoder.intArrayToByteArray(_0x5613ae),
        _0x216056;
    },
    'update': function(_0x59e3b5, _0x2de2b1, _0x6845bf) {
        var  _0x4956ba = parseInt((_0x6845bf + this.dataBufLen) / 64);
        this.totalLen += _0x6845bf;
        if (_0x6845bf + this.dataBufLen < this.BLOCK_BYTE_LEN)
            Decoder.arrayCopy(_0x59e3b5, 0, this.dataBuf, this.dataBufLen, _0x6845bf),
            this.dataBufLen = _0x6845bf + this.dataBufLen;
        else {
            var intArray;
            Decoder.arrayCopy(_0x59e3b5, 0, this.dataBuf, this.dataBufLen, this.BLOCK_BYTE_LEN - this.dataBufLen),
            intArray = Decoder.byteArrayToIntArray(this.dataBuf),
            this.iterate(intArray);
            for (var i = 1; i < _0x4956ba; i++) {
                Decoder.arrayCopy(_0x59e3b5, i * this.BLOCK_BYTE_LEN - this.dataBufLen, this.dataBuf, 0, this.BLOCK_BYTE_LEN),
                intArray = Decoder.byteArrayToIntArray(this.dataBuf),
                this.iterate(intArray);
            }
            Decoder.arrayCopy(_0x59e3b5, _0x4956ba * this.BLOCK_BYTE_LEN - this.dataBufLen, this.dataBuf, 0, _0x6845bf - (_0x4956ba * this.BLOCK_BYTE_LEN - this.dataBufLen)),
            this.dataBufLen = _0x6845bf - (_0x4956ba * this.BLOCK_BYTE_LEN - this.dataBufLen);
        }
    },
    'doFinal': function() {
        var arr = new Array(this.dataBufLen);
        Decoder.arrayCopy(this.dataBuf, 0, arr, 0, this.dataBufLen);
        var _0x80f671 = this.padding(arr)
          , _0x3d1bbb = Decoder.byteArrayToIntArray(_0x80f671);
        this.iterate(_0x3d1bbb);
        var _0x34b324 = this.vbuf;
        return Decoder.intArrayToByteArray(_0x34b324);
    },
    'sign': function(_0x5e5987, _0x1373cc) {
        var _0x30c6b2 = Decoder.utf8StrToBytes(_0x5e5987)
          , _0x37b8e3 = Decoder.utf8StrToBytes(_0x1373cc);
        this.update(_0x30c6b2, 0, _0x30c6b2.length),
        this.update(this.ivByte, 0, this.ivByte.length),
        this.update(_0x37b8e3, 0, _0x37b8e3.length);
        var _0x755bea = this.doFinal();
        return Decoder.encode(_0x755bea, 0, _0x755bea.length);
    },
    'nonce': function() {
        return Math.ceil(Math.random() * 2147483647) + '' + Math.floor(Date.now() / 1000);
    }
};
function Decoder() {}
Decoder.encode = function(arr, _0x51c2f4, _0x46c172) {
    var _0x2bbfdb = new Array(_0x46c172 * 2)
      , _0x381e73 = new Array('0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f');
    for (var i = _0x51c2f4, j = 0; i < _0x46c172 + _0x51c2f4; i++,
    j++) {
        _0x2bbfdb[j] = _0x381e73[(arr[i] & 255) >> 4],
        _0x2bbfdb[++j] = _0x381e73[arr[i] & 15];
    }
    return _0x2bbfdb.join('');
}
,
Decoder.utf8StrToBytes = function(str) {
    var _0x458320 = encodeURIComponent(str)
      , _0x28769a = unescape(_0x458320)
      , _0x21fbb8 = _0x28769a.length
      , bytes = [];
    for (var i = 0; i < _0x21fbb8; i++) {
        bytes[i] = _0x28769a.charCodeAt(i);
    }
    return bytes;
}
,
Decoder.toCharCodeArray = function(str) {
    var charCodeArr = new Array(str.length);
    for (var i = 0; i < str.length; i++) {
        charCodeArr[i] = str.charCodeAt(i);
    }
    return charCodeArr;
}
,
Decoder.arrayCopy = function(arr, _0x4ec325, _0x44720e, _0x4626f0, _0x27a211) {
    var _0xc3a002 = _0x27a211,len = arr.length;
    if (_0x4ec325 + _0x27a211 > len && _0x4626f0 + _0x27a211 <= _0x44720e.length)
        _0xc3a002 = len - _0x4ec325;
    else {
        if (_0x4626f0 + _0x27a211 > _0x44720e.length && _0x4ec325 + _0x27a211 <= len)
            _0xc3a002 = _0x44720e.length - _0x4626f0;
        else {
            if (_0x4ec325 + _0x27a211 <= len && _0x4626f0 + _0x27a211 <= _0x44720e.length)
                _0xc3a002 = _0x27a211;
            else
                _0x44720e.length < len ? _0xc3a002 = _0x44720e.length - _0x4626f0 : _0xc3a002 = len - _0x4626f0;
        }
    }
    for (var i = 0; i < _0xc3a002; i++) {
        _0x44720e[i + _0x4626f0] = arr[i + _0x4ec325];
    }
}
,
Decoder.longToByte = function(long) {
    return new Array(0,0,0,0,long >> 24 & 255,long >> 16 & 255,long >> 8 & 255,long & 255);
}
,
Decoder.intToByte = function(int) {
    return new Array(int >> 24 & 255,int >> 16 & 255,int >> 8 & 255,int & 255);
}
,
Decoder.intArrayToByteArray = function(intArray) {
    var byteArray = new Array(intArray.length * 4);
    for (var i = 0; i < intArray.length; i++) {
        Decoder.arrayCopy(Decoder.intToByte(intArray[i]), 0, byteArray, i * 4, 4);
    }
    return byteArray;
}
,
Decoder.byteToInt = function(byte, pos) {
    if (pos + 3 < byte.length)
        return byte[pos] << 24 | byte[pos + 1] << 16 | byte[pos + 2] << 8 | byte[pos + 3];
    else {
        if (pos + 2 < byte.length)
            return byte[pos + 1] << 16 | byte[pos + 2] << 8 | byte[pos + 3];
        else
            return pos + 1 < byte.length ? byte[pos] << 8 | byte[pos + 1] : byte[pos];
    }
}
,
Decoder.byteArrayToIntArray = function(byteArray) {
    var len = Math.ceil(byteArray.length / 4)
      , intArray = new Array(len);
    for (var i = 0; i < byteArray.length; i++) {
        byteArray[i] = byteArray[i] & 255;
    }
    for (var i = 0; i < intArray.length; i++) {
        intArray[i] = Decoder.byteToInt(byteArray, i * 4);
    }
    return intArray;
}
;
